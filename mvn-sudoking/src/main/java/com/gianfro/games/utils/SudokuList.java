package com.gianfro.games.utils;

import java.util.Arrays;
import java.util.List;

public class SudokuList {

    public static final String W_WING_1 = "925134687800659432436728951640010800150480060308060014500276348263841000784395126";
    public static final String W_WING_2 = "600950070009020000058031000164389752000175946597246008925417683000562000006893000";
    public static final String COLOR_WRAP = "214006000007902004000407000001870032002690000048021006420709861009168000186240009";
    public static final String COLOR_TRAP = "659000130001030625203165049020096310360700590910304062790600253506000981102000476";

    public static final String TEST_XY_CHAIN_1 = "361749528584000790792000004923574080416000357857631249678000412145287900239416875"; // XY CHAIN 3
    public static final String TEST_XY_CHAIN_2 = "570401690948276153600000740009000304400093506305000901254367819000000265196528437"; // XY CHAIN 8
    public static final String TEST_XY_CHAIN_3 = "080103070090506000001408020578241639143659782926837451037905200000304097419782060"; // XY CHAIN 5
    public static final String TEST_XY_CHAIN_4 = "570401690948276153600000740009000304400093506305000901254367819000000265196528437"; // XY CHAIN 8

    public static final String TEST_REMOTE_PAIRS_1 = "798452316603781092012030870370265048820143760060897023980014237107028050200070081"; // REMOTE PAIRS 4-5
    public static final String TEST_REMOTE_PAIRS_2 = "178609050934150607256703010793560041641037590825914736567301000410075060380406175"; // REMOTE PARIS 2-8

    public static final String TEST_X_CHAIN_1 = "304520080006090000050070300000689023000734000063152700010960000009040060608217005"; // X CHAIN IN 7
    public static final String TEST_X_CHAIN_2 = "000351780857629341100874002509162804681040200000008160718000020000010008060080017"; // X CHAIN IN 3

    public static final String DISCOUNTINUOUS_NICE_LOOP = "250400871317820400480710000075341000124600307063072104601000742548207610702164000"; // MOLTE ALTRE TECNICHE HARD

    public static final String EVEREST1 = "800000000003600000070090200050007000000045700000100030001000068008500010090000400"; // Arto Inkala everest 1
    public static final String EVEREST2 = "000200081000000000158430000006045000000100003490720000300000064600070100017000009"; // Arto Inkala everest 2

    public static final String TEST_NAKED_2_ALL = "687004523953002614142356978310007246760000305020000701096001032230000057070000069"; // BOX 5, ROW E, COL 6

    public static final String TEST_NAKED_3_ROW = "390000700000000650507000349049380506601054983853000400900800134002940865400000297"; // BOX 2 AND ROW B
    public static final String TEST_NAKED_3_COL = "000294380000178640480356100004837501000415700500629834953782416126543978040961253"; // COL 2

    public static final String TEST_NAKED_4_BOX = "532786000978241060001953287025400670003617052700500000000100000000805106000300098"; // BOX 7
    public static final String TEST_NAKED_4_ROW = "010720563056030247732546189693287415247615938581394000000002000000000001005870000"; // ROW H

    public static final String TEST_HIDDEN_1_BOX = "000040010203000000500000000007500208040060000000000300000203000160000000000800000"; // CELLS C3 i6

    public static final String TEST_HIDDEN_2_BOX = "000060000000042736006730040094000068000096407607050923100000085060080271005010094"; // BOX 1
    public static final String TEST_HIDDEN_2_COL = "049132000081479000327685914096051800075028000038046005853267000712894563964513000"; // COL 9

    public static final String TEST_HIDDEN_3_BOX = "280000473534827196071034080300500040000340060460790310090203654003009821000080937"; // BOX 7
    public static final String TEST_HIDDEN_3_ROW = "000001030231090000065003100678924300103050006000136700009360570006019843300000000"; // BOX 7, ROW A, COL 9
    public static final String TEST_HIDDEN_3_COL = "500620037004890000000050000930000000020000605700000003000009000000000700680570002"; // COL 6

    public static final String TEST_HIDDEN_4_BOX = "861573294392000000457209006941000568785496123623800040279000001138000070564000082"; // BOX 8
    public static final String TEST_HIDDEN_4_ROW = "000001030231090000065003100678924300103050006000136700009360570006019843300000000"; // ROW F
    public static final String TEST_HIDDEN_4_COL = "030000010008090000400608000000576940000983520000124000276005190000709000095000470"; // COL 9

    public static final String TEST_POINTING_CANDIDATES_ROW = "340006070080000930002030060000010000097364850000002000000000000000608090000923785"; // ROW G, H e ancora G
    public static final String TEST_POINTING_CANDIDATES_COL = "032006100410000000000901000500090004060000071300020005000508000000000519057009860"; // molteplici casi in row e col
    public static final String TEST_POINTING_CANDIDATES_TRIPLE = "930050000200630095856002000003180570005020980080005000000800159508210004000560008"; // COL 6

    public static final String TEST_CLAIMING_CANDIDATES_ROW = "318005406000603810006080503864952137123476958795318264030500780000007305000039641"; // ROW B
    public static final String TEST_CLAIMING_CANDIDATES_COL = "762008001980000006150000087478003169526009873319800425835001692297685314641932758"; // COL 6

    public static final String TEST_X_WING_ROW = "041729030769003402032640719403900170607004903195370024214567398376000541958431267"; // B5, B8, E5, E8
    public static final String TEST_X_WING_COL = "980062753065003000327050006790030500050009000832045009673591428249087005518020007"; // B1, B5, E1, E5

    public static final List<String> WEEKLY_UNSOLVABLE = Arrays.asList(
            "100200000065004800070006900004000090050408700000030040000000600080000057006007089", // unsolvable #393 (25 num) non risolve
            "000000079000040058057090600089060007200004000000300000090000006068050090102000000", // unsolvable #392 (24 num) non risolve
            "000080600000204000708060000000002040005070900030001000600000005010000036507000800", // unsolvable #391 (22 num) non risolve
            "980700600750000080006000000040030000007800050000000400009600070008450060060002001", // unsolvable #390 (24 num) 1513 ms
            "000000079000004058057090600089060007270009000000300000000040006068050090100000000", // unsolvable #389 (24 num) 1008 ms
            "002800000030060007100000040600090000050600009000057060000300100070006008400000020", // unsolvable #49  (22 num) non risolve
            "600008940900006100070040000200610000000000200089002000000060005000000030800001600"  // unsolvable #28  (22 num) non risolve
    );

    public static final List<String> BLOCKED = Arrays.asList(
            "000000071300800000080000000005041000020000300000070000601000040000200600700000000", // X CYCLE poi va
            "000000206000080100900700000000030090056000000020000000000106500400000030000200000",
            "000000206000090800900700000000030070056000000020000000000106500400000030000200000",
            "000000608900002000000000300500060070000800000000030000020007500038100000000000040",
            "000010600300000020700000000000702000010000800500300000000200035400000007060000000",
            "000650200800000030000100000000004070062000000001000000700030000030000100000008006",
            "002000050100040000000036000000000406009200000000000100640700000000000890030000000",
            "100500000000904000002000700000000054003020000000000100450060000000000380090000000",
            "210300000000060050000000000300000702004050000000000100000102080036000000000700000",
            "300107000020000800000000000000300047080060000000000010107000300000520000400000000",
            "500080200740000000000000000002050000000600007800000040060700000001000500000304000",
            "600702000005000800000000000008030000030000070000000012720000400000650000100000000",
            "700080000000000104000000200000102000200000030000400500051030000000006070040000000",
            "900040000000000105000000200000106000400000060000500700071030000000008090050000000",
            "006003000010000040000050000200000300090100000500000000080000109300020000000400050"
    );

    public static final List<String> AVERAGE_HARD = Arrays.asList(
            "000040287080000000000708690720050000105000809000070032012507000000000020693020000", // hard 1
            "000500069600090300000007810094100700800209005001006980053900000009050001760001000", // hard 2
            "002008000007100035810300007000900502020000090508004000700005063650001900000400700", // hard 3
            "000000970000040006076090042040002000039104250000300010980020530700080000054000000", // hard 4
            "010000008006000079007830000090170030082000190030026050000085700570000400100000020", // hard 5
            "400002090008010030020000061700400006000201000100007005350000010080070900070800003", // hard 6
            "000000090009002017040900802000750001700208005200091000501006070420500600030000000", // hard 7
            "700000206040700000000400517000200009200090005400007000579003000000001070301000008", // hard 8
            "003804090000320070000000042970000000102060705000000069510000000090031000060507100", // hard 9
            "007000000090600003005010048000004005006000200400200000130050900900007030000000800", // hard 10
            "000036050300000400005801030906003000020000080000400506010708300007000009040160000", // hard 11
            "000008270096150000000047009500004730000000000031700005100270000000081390073400000", // hard 12
            "000000090009002017040900802000750001700208005200091000501006070420500600030000000", // hard 13
            "024800900190000700700000045200089000000103000000570004610000008003000096005008310"  // hard 14
    );

    public static final List<String> MIXED_SUDOKUS = Arrays.asList(
            "000500000425090001800010020500000000019000460000000002090040003200060807000001600", // (24 num) con hidden quad che produce empty rettangle
            "040560000800010000000009600407003006050020008060700340000070100200400000000052007", // extremly hard (presunto);
            "000430800000020054030006010010050906006000400207090080070500040540060000008043000", // primo
            "100032960672000400304570000001200754205000306467009100000025609009000278026790003", // facile
            "020600008100070030008020700300007800002508300005900006001080600090050002200001070", // diablo
            "002061800000000700490300006900010200500406008001070009700004032004000000003720600", // diablo2
            "009040200020000000007805460905200300700603005003001704078502600000000090002060100", // difficile
            "006027050000009200000100760007980000069000410000071600095002000004600000010750900", // nuovo
            "001000000002030004000500607500140000070000020000078009807009000400060300000000500", // arduo
            "000750024003610008700000500600000050140000086080000007001000009400068300350097000", // sulzer
            "074120000206400070198700000951840000300971008000065291000007854020004607000083910", // veryEasy
            "500200080010060700003008009000500030004000100090007000300100400006070020020009005", // jesolo
            "200690070000804000004000600450002030007000100020400056001000700000708000040023009", // nEsimo
            "000000000000003085001020000000507000004000100090000000500000073002010000000040009", // (17 num) contro brute force
            "000210000007300000058000000430000000200000008000000076000000250000007300000098000", // (18 num) automorfico two-way diagonal simmetry
            "500620037004890000000050000930000000020000605700000003000009000000000700680570002"  // (23 num) hidden triple come primo step
    );
}